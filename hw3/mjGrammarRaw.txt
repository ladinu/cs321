//---------------------------------------------------
// Raw grammar for the miniJava Language (CS321 W'14) 
//
// Jingke Li, Portland State University
//---------------------------------------------------

Program    -> {ClassDecl}

ClassDecl  -> "class" <Id> ["extends" <Id>] "{" {VarDecl} {MethodDecl} "}"

MethodDecl -> "public" ExtType <Id> "(" [Formals] ")" 
                "{" {VarDecl} {Stmt} "}"
           |  "public" "static" "void" "main" "(" "String" "[" "]" <Id> ")"
                "{" {VarDecl} {Stmt} "}" 

Formals    -> Type <Id> {"," Type <Id>}

VarDecl    -> Type <Id> ["=" InitExpr] ";"

ExtType    -> "void"               
           |  Type                 

Type       -> BasicType                          // basic type
           |  BasicType "[" "]"                  // array type
           |  <Id>                               // object type

BasicType  -> "int"
           |  "boolean"

Stmt  ->   "{" {Stmt} "}"                                 // stmt block
           |  ExtId "(" [Args] ")" ";"                    // call stmt
           |  ExtId ["[" Expr "]"] "=" InitExpr ";"       // assignment
           |  "if" "(" Expr ")" Stmt ["else" Stmt]        // if stmt
           |  "while" "(" Expr ")" Stmt                   // while stmt
           |  "System.out.println" "(" [PrintArg] ")" ";" // print stmt
           |  "return" [Expr] ";"                         // return stmt

Args       -> Expr {"," Expr}

PrintArg   -> Expr 
           |  <StrLit>

InitExpr   -> "new" BasicType "[" <IntLit> "]"   // new array
           |  "new" <Id> "(" [Args] ")"          // new object
           |  Expr 

Expr       -> Expr BinOp Expr 
           |  UnOp Expr
           |  ExtId "(" [Args] ")"
           |  ExtId "[" Expr "]"
           |  ExtId
           |  "(" Expr ")" 
           |  <IntLit>
           |  <BoolLit>

ExtId      -> ["this" "."] <Id> {"." <Id>} 

BinOp      -> "+"  | "-"  | "*" | "/"  | "&&" | "||"
           |  "==" | "!=" | "<" | "<=" | ">"  | ">=" 

UnOp       -> "-" | "!"


//--------------------------------------
// Operator Associativity and Precedence
//--------------------------------------

The arithmetic and logical binary operators are all left-associative.

Operators' precedence order:

highest  
  new, ()
  [], .(selector), method call
  -, !
  *, /
  +, -
  ==, !=, <, <=, >, >=
  &&
  ||
lowest
