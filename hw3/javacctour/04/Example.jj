// 04 Token objects contain information about the position of a
//    token in the input stream, and they can be passed as arguments
//    to other functions.

//-- Define a program that consumes tokens: ----------------------------------

PARSER_BEGIN(Example)

public class Example {
  public static void main(String args[]) throws ParseException {
    new Example(System.in);  // Read from standard input
    while (getNextToken().kind!=EOF) {
      System.out.print("(" + token.beginColumn + "," + token.beginLine + ")-");
      System.out.print("(" + token.endColumn   + "," + token.endLine   + "): ");
      System.out.println(describe(token));
    }
    System.out.println("Last token has been read");
  }

  static String describe(Token t) {
    switch (t.kind) {
      case INTLIT  : return "INTLIT(" + t.image + ")";
      case KEYWORD : return "KEYWORD(" + t.image + ")";
      case IDENT   : return "IDENT(" + t.image + ")";
      default      : return "UNKNOWN(" + t.kind + "," + t.image + ")";
    }
  }
}

PARSER_END(Example)

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Lexemes that should be reported as valid tokens:
TOKEN : {
  <INTLIT    : <ZERO> | <POSDIGIT> (<DIGIT>)*>
| <#POSDIGIT : ["1"-"9"]>
| <#ZERO     : "0">
| <#DIGIT    : <ZERO> | <POSDIGIT> >
}

TOKEN : {
  <KEYWORD : "while" | "print" | "if" | "else" | "for" | "var">
| <COMMA   : ",">
| <OPEN    : "(">
| <CLOSE   : ")">
}

TOKEN : {
  <IDENT:   <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["A"-"Z","a"-"z","_"]>
}
