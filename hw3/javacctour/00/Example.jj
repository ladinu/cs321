// 00 Basic structure of a .jj file
//    
//    To compile and run at the command prompt:
//    $ javacc Example.jj        # Compile a JavaCC file to Java, 
//                               # emitting Example.java and dependencies.
//    $ javac Example.java       # Compile the generated java to bytecode
//                               # emitting Example.class and dependencies.
//    $ java Example < test.mini # Run the generated bytecode, with the
//                               # contents of file test.mini sent to the 
//                               # standard input file descriptor 
//                               # (System.in in Java). 

//-- Define a program that consumes tokens: ----------------------------------

PARSER_BEGIN(Example)

public class Example {
  public static void main(String args[]) throws ParseException {
    new Example(System.in);  // Read from standard input
    while (getNextToken().kind!=EOF) {
      System.out.println("Token kind is " + token.kind +
                         ", image is " + token.image);
    }
    System.out.println("Last token has been read");
  }
}

PARSER_END(Example)

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

// Lexemes that should be reported as valid tokens:
TOKEN : {
  <INTLIT : "0" | ["1"-"9"] (["0"-"9"])*>
}
