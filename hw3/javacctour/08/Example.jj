// 08 Reading a sequence of numbers in to an array.  This corresponds
//    to an abstract syntax for the simple language in which all
//    valid "programs"/"inputs" are lists of integer values.  Once
//    we have captured the whole data set in a single array, we can
//    pass it as a unit to functions that operate on arrays of numbers.

//-- Define a program that consumes tokens: ----------------------------------

PARSER_BEGIN(Example)

public class Example {
  public static void main(String args[]) throws ParseException {
    new Example(System.in);  // Read from standard input

    int[] nums = readArray(0);
    System.out.print("You entered  : ");
    showArray(nums);
    System.out.print("After flip   : ");
    flip(nums);
    showArray(nums);
    System.out.println("Total sum    : " + sum(nums));
    System.out.println("Maximum value: " + maximum(nums));
    System.out.print("Cumulatives  : ");
    cumulativeSums(nums);
    showArray(nums);
  }

  // Read a list of integer values from the token stream, returning the
  // results in an array.  The biggest problem here is that we don't
  // know how big to make the array when we start.  And so, instead,
  // we count the number of elements seen so far using an input
  // parameter and delay allocating the array (or storing any of its
  // elements) until we reach the end of the input stream.
  public static int[] readArray(int soFar) {
      if (getNextToken().kind==INTLIT) {
          int   n     = Integer.parseInt(token.image);
          int[] nums  = readArray(soFar+1);
          nums[soFar] = n;
          return nums;
      } else {
          return new int[soFar];
      }
  }

  // Some functions for doing (mildly) interesting things with
  // arrays of integers:

  public static void showArray(int[] nums) {
      System.out.print("[");
      if (nums!=null && nums.length>0) {
          System.out.print(nums[0]);
          for (int i=1; i<nums.length; i++) {
              System.out.print(", ");
              System.out.print(nums[i]);
          }
      }
      System.out.println("]");
  }

  public static void flip(int[] nums) {
      int i = 0, j = nums.length-1;
      while (i<j) {
          int t     = nums[i];
          nums[i++] = nums[j];
          nums[j--] = t;
      }
  }

  public static int sum(int[] nums) {
      int total = 0;
      for (int i=0; i<nums.length; i++) {
          total += nums[i];
      }
      return total;
  }

  public static int maximum(int[] nums) {
      int max = nums[0];  // assume nonempty!
      for (int i=1; i<nums.length; i++) {
          if (nums[i] > max) {
              max = nums[i];
          }
      }
      return max;
  }

  public static void cumulativeSums(int[] nums) {
      for (int i=1; i<nums.length; i++) {
          nums[i] += nums[i-1];
      }
  }
}

PARSER_END(Example)

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Lexemes that should be reported as valid tokens:
TOKEN : {
  <INTLIT    : <ZERO> | <POSDIGIT> (<DIGIT>)*>
| <#POSDIGIT : ["1"-"9"]>
| <#ZERO     : "0">
| <#DIGIT    : <ZERO> | <POSDIGIT> >
}
