// 15 Using javacc's syntax for writing parsing functions ... at last!
//    (SPOILER ALERT: we might still have some work to do after this ...)

//-- Define a program that consumes tokens: ----------------------------------

PARSER_BEGIN(Example)

public class Example {
  public static void main(String args[]) throws ParseException {
      new Example(System.in);  // Read from standard input
      int n = Top();
      System.out.println("Result is: " + n);
  }
}

PARSER_END(Example)

//-- Define the grammatical rules of the input language: ---------------------

int Top() : { int n; } {
  n=E() <EOF> { return n; }
}

int E() : { int n, m; } {
    n=P()           { return n;}
  | n=E() "+" m=P() { return n+m; }
  | n=E() "-" m=P() { return n-m; }
}

int P() : { int n, m; } {
    n=A()           { return n; }
  | n=P() "*" m=A() { return n * m; }
}

int A() : { int n; } {
  ( "(" n=E() ")"
  | n=I())
  { return n; }
}

int I() : { Token t; } {
  t=<INTLIT>
  { return Integer.parseInt(t.image); }
}


//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Lexemes that should be reported as valid tokens:
TOKEN : {
  <INTLIT    : <ZERO> | <POSDIGIT> (<DIGIT>)*>
| <#POSDIGIT : ["1"-"9"]>
| <#ZERO     : "0">
| <#DIGIT    : <ZERO> | <POSDIGIT> >
}

/* We don't need these token definitions any more!
TOKEN : {
  <ADD   : "+">
| <SUB   : "-">
| <MUL   : "*">
| <OPEN  : "(">
| <CLOSE : ")">
}
*/
