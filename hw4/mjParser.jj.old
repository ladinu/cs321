// This is supporting software for CS321 Compilers and Language Design I
// Copyright (c) Portland State University
// 
//----------------------------------------------------------------------
// An starting program for miniJava Parser.
//
// For CS321 HW4, W'14
//
// Instructions:
//
// 1. Copy or rename this file to 'mjParser.jj'.
// 2. Add parsing routines to the parser section (either copy from your 
//    'mjGrammarLL.jj' program or convert from 'mjGrammarLL2.txt'.
// 3. Insert semantic actions into the parsing routines.
//----------------------------------------------------------------------
//
//

// options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(mjParser)
import java.util.*;
import java.io.*;
import ast.*;

public class mjParser {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
	FileInputStream stream = new FileInputStream(args[0]);
	Ast.Program p = new mjParser(stream).Program();
	stream.close();
	System.out.print(p);
      } else {
	System.out.print("Need a file name as command-line argument.\n");
      }
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(mjParser)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* White space */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* Comments */
{
  <SLComment:    "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MLComment:    "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ "/">
| <Unterminated: "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ >
    { if (true) throw new TokenMgrError("Unterminated multi-line comments ", 0); }  
}

TOKEN : /* Keywords */
{
  <kwBoolean: "boolean">   
| <kwClass:   "class">
| <kwElse:    "else">
| <kwExtends: "extends">
| <kwIf:      "if">
| <kwInt:     "int">
| <kwMain:    "main">
| <kwNew:     "new">
| <kwPublic:  "public">
| <kwReturn:  "return">
| <kwStatic:  "static">
| <kwString:  "String">
| <kwPrint:   "System.out.println">
| <kwThis:    "this">
| <kwVoid:    "void">         
| <kwWhile:   "while">
| <#Digit:    ["0"-"9"]>
| <#Letter:   (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* BoolLit */
{
  <BoolLit: "true"|"false">
}

TOKEN : /* IntLit */
{
  <IntLit: (<Digit>)+> 
  { try { 
      Integer.parseInt(matchedToken.image); 
    } catch (Exception e) { 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Integer overflow: " + matchedToken.image, 0);
    } 
  }
}

TOKEN : /* StrLit */
{
  <StrLit: ("\"" (~["\"","\n"])+ "\"")>
  { if (matchedToken.image.length() > 257) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". String length over 255: " + matchedToken.image, 0); 
  }
}

TOKEN : /* Id */
{
  <Id: <Letter> (<Letter>|<Digit>|"_")*>
  { if (matchedToken.image.length() > 255) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Id length over 255: " + matchedToken.image, 0);
  }
}

// Operators and Delimiters are not explicitly defined:
//
// Operators:  "="|"+"|"-"|"*"|"/"|"&&"|"||"|"!"|"=="|"!="|"<"|"<="|">"|">="
// Delimiters: ";"|","|"."|"("|")"|"["|"]"|"{"|"}"
//


//
// PARSER SECTION ---------------------------------------------------------------
//
Ast.Program Program():
{  List<Ast.ClassDecl> c1 = new ArrayList<Ast.ClassDecl>();
   Ast.ClassDecl c;
}
{
   ( c=ClassDecl() {c1.add(c);} )* <EOF>
   { return new Ast.Program(c1); }
}

Ast.ClassDecl ClassDecl():
{  Ast.Id className;
   Ast.Id parentName = null;
   List<Ast.VarDecl> variables  = new ArrayList<Ast.VarDecl>();
   List<Ast.MethodDecl> methods = new ArrayList<Ast.MethodDecl>();
   
   Ast.VarDecl variable;
   Ast.MethodDecl method;
}
{
   "class" className=Id() ["extends" parentName=Id()] "{" 
      (variable=VarDecl()   { variables.add(variable); })* 
      (method=MethodDecl()  { methods.add(method);     })* 
   "}"

   { return new Ast.ClassDecl(className.nm, parentName.nm, variables, methods); }  
}

Ast.MethodDecl MethodDecl():
{  Ast.Type type = null;
   Ast.Id methodName;
   List<Ast.Param> params = new ArrayList<Ast.Param>();
   List<Ast.VarDecl> variables = new ArrayList<Ast.VarDecl>();
   List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();

   Ast.Param p;
   Ast.VarDecl var;
   Ast.Stmt stmt;
}
{
   "public" ( type=ExtType() methodName=Id() "(" 
              [p=Param() {params.add(p);} ("," p=Param() {params.add(p);})*] ")" |
              "static" "void" "main" "(" 
                  "String" "[" "]" p=Param() {params.add(p);} 
               ")" )
      "{" 
         (var=VarDecl() {variables.add(var);})* 
         (stmt=Stmt() {stmts.add(stmt);})*
      "}"

   { return new Ast.MethodDecl(type, methodName.nm, params, variables, stmts); }
}

Ast.Param Param():
{  Ast.Type type;
   Ast.Id name;
}
{  type=Type() name=Id()
   { return new Ast.Param(type, name.nm); }
}

Ast.VarDecl VarDecl():
{  Ast.Type type;
   Ast.Id name;
   Ast.Exp exp;
}
{  type=Type() name=Id() ["=" exp=InitExpr()] ";"
   { return new Ast.VarDecl(type, name.nm, exp); }  
}

Ast.Type ExtType():
{  Ast.Type type; }
{  "void" { type=null; } | type=Type()
   { return type; }
}

Ast.Type Type():
{  Ast.Type type; 
   Ast.Id typeId; }
{  type=BasicType() [ "[" "]" {type = new Ast.ArrayType(type);}] |
   typeId=Id() { type = new Ast.ObjType(typeId.nm);}
   { return type; }
}

Ast.Stmt Stmt():
{  List<Ast.Block> blocks = new ArrayList<Ast.Block>();

   Ast.Stmt stmt;
   Ast.Stmt stmt0 = null;
   Ast.Block block;
   Ast.Assign assign;
   Ast.CallStmt call;
   Ast.If ifStmt;
   Ast.While whileStmt;
   Ast.Print print;
   Ast.Return returnStmt;

   Ast.Exp extId;
   Ast.Exp exp1;
   Ast.Exp exp2;
   Ast.Exp exp0 = null;
}
{  "{" (stmt=Stmt() {blocks.add(Ast.Block(stmt));})* "}" { return new Ast.Block(block); } |
   exp1=ExtId() "=" exp2=InitExpr() ";" {return Ast.Assign(exp1, exp2);}
   "if" "(" exp1=Expr() ")" stmt=Stmt()  ["else" stmt0=Stmt()] {return new
      Ast.If(exp1, stmt, stmt0);} |
   "while" "(" exp1=Expr() ")" stmt=Stmt() {return new Ast.While(exp1, stmt);} |
   //"Systme.out.println" "("[exp0=PrintArg()] ")"  ";" {return new Ast.Print(exp0);}|
   "return" [exp0=Expr()] ";" {return new Ast.Return(exp0);}
   
}

Ast.Exp ExtId():
{  Ast.This self;
   Ast.Exp tmpId;
   Ast.Exp retExp;
}
{
   ["This" "." {self = new Ast.This();}] retExp=Id() 
   { 
      if (self) 
         retExp = new Ast.Field(self, retExp.nm); 
   } ("." tmpId=Id() {retExp = new Ast.Field(retExp, tmpId.nm); })*

   { return retExp; }
}

Ast.Exp InitExpr(): 
{
   Ast.Exp initExpr;
}
{
   initExpr=Expr()
   { return initExpr; }
}


Ast.Exp Expr():
{
   Token token;
}
{
   token=<IntLit> {return new Ast.IntLit(token.image.toInt());} |
   token=<StrLit> {return new Ast.StrLit(token.image);} |
   token=<BoolLit>{return new Ast.BoolLit(Boolean.parseBoolean(token.image));}
}

Ast.Type BasicType():
{  Ast.Type type; }
{  (type=BoolType() | type=IntType() )
   { return type; }
}

Ast.Id Id():
{  Token token; }
{
   token=<Id> { return new Ast.Id(token.image); }
}

Ast.Type BoolType(): {}
{
   "boolean" { return new Ast.BoolType(); }
}

Ast.Type IntType(): {}
{
   "int" { return new Ast.IntType(); }
}

Ast.BOP CompOp(): {}
{
 ( "==" { return Ast.BOP.EQ; }
 | "!=" { return Ast.BOP.NE; }
 | "<=" { return Ast.BOP.LE; }
 | ">=" { return Ast.BOP.GE; }
 | "<"  { return Ast.BOP.LT; }
 | ">"  { return Ast.BOP.GT; })
}
